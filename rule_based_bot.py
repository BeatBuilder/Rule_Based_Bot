# -*- coding: utf-8 -*-
"""Rule Based Bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AoZFTUCYLibsPvkACB4W7_wUnYH9eQu7
"""

import re
import random

class RuleBot:
    ### Potential Negative Responses
    negative_responses = ("no", "nope", "nah", "not a chance", "sorry")

    ### Exit Conversation Keywords
    exit_commands = ("quit", "pause", "exit", "goodbye", "bye", "later")

    ### Random Starter Questions
    random_questions = (
        "Why are you here? ",
        "Are there many humans like you? ",
        "What do you consume for sustenance? ",
        "Is there intelligent life on this planet? ",
        "Does Earth have a leader? ",
        "What planets have you visited? ",
        "What technology do you have on this planet?"
    )

    def __init__(self):
        self.alienbabble = {
            'describe_planet_intent': r'.*\s*your planet',
            'answer_why_intent': r'why\sare.*',
            'about_intellipaat': r'.*\s*intellipaat'
        }

    def greet(self):
        try:
            self.name = input("What is your name?\n")
            will_help = input(f"Hi {self.name}, I am Rule-Bot. Will you help me learn about your planet?\n")
            if will_help.lower() in self.negative_responses:
                print("Ok, have a nice Earth day!")
                return
            self.chat()
        except Exception as e:
            print(f"Error in greet: {e}")

    def make_exit(self, reply):
        try:
            reply = reply.lower()
            for command in self.exit_commands:
                if reply == command:
                    print("Okay, have a nice Earth day!")
                    return True
            return False
        except Exception as e:
            print(f"Error in make_exit: {e}")
            return False

    def chat(self):
        try:
            reply = input(random.choice(self.random_questions)).lower()
            while not self.make_exit(reply):
                reply = input(self.match_reply(reply)).lower()
        except Exception as e:
            print(f"Error in chat: {e}")

    def match_reply(self, reply):
        try:
            for key, value in self.alienbabble.items():
                regex_pattern = value
                found_match = re.match(regex_pattern, reply)
                if found_match:
                    return getattr(self, key)()  # Call the method based on intent
            return self.no_match_intent()
        except Exception as e:
            print(f"Error in match_reply: {e}")
            return self.no_match_intent()

    def describe_planet_intent(self):
        responses = (
            "My planet is a utopia of diverse organisms and species.\n",
            "I am from Opidipus, the capital of the Wayward Galaxies.\n"
        )
        return random.choice(responses)

    def answer_why_intent(self):
        responses = (
            "I come in peace.\n",
            "I am here to collect data on your planet and its inhabitants.\n",
            "I heard the coffee is good.\n"
        )
        return random.choice(responses)

    def about_intellipaat(self):
        responses = (
            "Intellipaat is the world's largest professional educational company.\n",
            "Intellipaat will make you a skilled professional.\n",
            "Intellipaat is where your career and skill grow.\n"
        )
        return random.choice(responses)

    def no_match_intent(self):
        responses = (
            "I'm not sure how to respond to that.\n",
            "Can you tell me more?\n",
            "Let's talk about something else!\n"
        )
        return random.choice(responses)

# Create an instance of RuleBot
if __name__ == "__main__":
    Alien = RuleBot()
    Alien.greet()

